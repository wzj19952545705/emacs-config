;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-tags-history counsel-locate-history counsel-git-grep-history grep-find-history counsel-grep-history counsel-imenu-history bookmark-history buffer-name-history swiper-history evil-ex-history woman-topic-history read-expression-history epkg-package-history treesit--install-language-grammar-out-dir-history minibuffer-history ivy-history counsel-describe-symbol-history find-function--read-history-variable counsel-M-x-history yes-or-no-p-history extended-command-history file-name-history))
(setq counsel-grep-history '(#("f" 0 1 (ivy-index 0))))
(setq buffer-name-history '(#("README" 0 6 (ivy-index 0)) #("*Warnings*" 0 10 (ivy-index 0)) #("a.org" 0 5 (ivy-index 0))))
(setq swiper-history '(#("use_ex" 0 6 (ivy-index 0)) #("       if (use_exfld) then" 0 1 (swiper-line-number 1099 display "1099 ") 1 26 (rear-nonsticky t font-lock-face aider-command-text face aider-command-text)) #("epolar3a" 0 8 (ivy-index 3)) #("       subroutine epolar3a" 0 1 (swiper-line-number 60 display "60   ") 1 7 (fontified t) 7 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 26 (fontified t face font-lock-function-name-face)) #("Go " 0 3 (ivy-index 0)) #(" 	  (\".\" tab-next \"Go to next tab\")" 0 1 (swiper-line-number 72 display "72  ") 1 5 (fontified t) 5 8 (fontified t face font-lock-string-face) 8 18 (fontified t) 18 34 (fontified t face font-lock-string-face) 34 35 (fontified t)) #("ired" 0 4 (ivy-index 4)) #(" | ired     | store the index of reduced atom i      |" 0 1 (swiper-line-number 242 display "242 ") 1 2 (fontified t face org-table) 2 3 (fontified t face org-table) 3 7 (fontified t face org-table) 7 11 (fontified t face org-table) 11 12 (fontified t face org-table) 12 13 (fontified t face org-table) 13 14 (fontified t face org-table) 14 47 (fontified t face org-table) 47 52 (fontified t face org-table) 52 53 (fontified t face org-table) 53 54 (fontified t face org-table)) #("ivdw" 0 4 (ivy-index 4)) #("    i = ivdw(k) ! ivdw is an integer array that stores the indices of atoms involved in vdw.It acts as a mapping between the van der Waals interaction list and the actual atom indices in the system" 0 1 (swiper-line-number 219 display "219 ") 1 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #4=(org-block) wrap-prefix #2=#(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #3=#(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 16 18 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #4#) wrap-prefix #2# line-prefix #3#) 18 73 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1=(font-lock-comment-face . #4#) wrap-prefix #2# line-prefix #3#) 73 197 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1# wrap-prefix #2# line-prefix #3#)) #("nvdw" 0 4 (ivy-index 0)) #("     if (nvdw .eq. 0) return ! exit the subroutine if no vdw interaction exists" 0 1 (swiper-line-number 141 display "141 ") 1 5 (fontified t font-lock-fontified t font-lock-multiline t face #1=(org-block) src-block t wrap-prefix #2=#(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #3=#(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 5 7 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 7 14 (fontified t font-lock-fontified t font-lock-multiline t face #1# src-block t wrap-prefix #2# line-prefix #3#) 14 18 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 18 22 (fontified t font-lock-fontified t font-lock-multiline t face #1# src-block t wrap-prefix #2# line-prefix #3#) 22 28 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 28 29 (fontified t font-lock-fontified t font-lock-multiline t face #1# src-block t wrap-prefix #2# line-prefix #3#) 29 31 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 31 73 (fontified t font-lock-fontified t font-lock-multiline t face #4=(font-lock-comment-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 73 79 (fontified t font-lock-fontified t font-lock-multiline t face #4# src-block t wrap-prefix #2# line-prefix #3#)) #("i12" 0 3 (ivy-index 1)) #(" end do ! i12 stores stores neighbor atom pairs (1-2 pairs)" 0 1 (swiper-line-number 247 display "247 ") 1 4 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #1=(org-block)) src-block t wrap-prefix #2=#(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #3=#(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 5 (fontified t font-lock-fontified t font-lock-multiline t face #1# src-block t wrap-prefix #2# line-prefix #3#) 5 7 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 7 8 (fontified t font-lock-fontified t font-lock-multiline t face #1# src-block t wrap-prefix #2# line-prefix #3#) 8 10 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#) src-block t wrap-prefix #2# line-prefix #3#) 10 59 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #1#) src-block t wrap-prefix #2# line-prefix #3#)) #("elj3a" 0 5 (ivy-index 1)) #(" c     ##  subroutine elj3a  --  double loop Lennard-Jones analysis  ##" 0 1 (swiper-line-number 77 display "77   ") 1 2 (fontified t syntax-table (11) face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-delimiter-face) 7 71 (fontified t face font-lock-comment-face)) #("          call elj3a" 0 1 (swiper-line-number 45 display "45   ") 1 10 (fontified t) 10 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-function-name-face)) #("    iv = ired(i)" 0 1 (swiper-line-number 219 display "219 ") 1 16 (fontified nil)) #("    iv = ired(i)" 0 1 (swiper-line-number 219 display "219 ") 1 16 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) "counsel"))
(setq evil-ex-history '("w" "split" "vs" "split" "vs" "q" "split" "vs" "v" "vs" "q" "vs elj3.org" "w" "q" "w"))
(setq read-expression-history '("q"))
(setq epkg-package-history '(#("xenops" 0 6 (ivy-index 0))))
(setq treesit--install-language-grammar-out-dir-history '("~/.emacs.d/tree-sitter"))
(setq minibuffer-history '("2x12" "5x2" "2x5" "2x4" "4x2" "2x6" "2*6" "6x2" "https://github.com/stadelmanma/tree-sitter-fortran.git"))
(setq ivy-history '(#("~/.emacs.d/lisp/init-general.el" 0 31 (ivy-index 2)) #("~/.emacs.d/lisp/init-dirvish.el" 0 31 (ivy-index 3)) #("gen" 0 3 (ivy-index 0)) #("~/.emacs.d/lisp/init-rainbow-delimiter.el" 0 41 (ivy-index 2)) #("~/.emacs.d/lisp/init-super-save.el" 0 34 (ivy-index 3)) #("~/.emacs.d/init.el" 0 18 (ivy-index 2)) #("ge" 0 2 (ivy-index 0)) #("aider" 0 5 (ivy-index 0)) "~/.emacs.d/lisp/init-aider.el" #("evi" 0 3 (ivy-index 0)) "~/.emacs.d/lisp/init-evil.el" #("or" 0 2 (ivy-index 0)) #("~/tinker/source/epolar3.org" 0 27 (ivy-index 3)) #("~/tinker/source/epolar3.f" 0 25 (ivy-index 2)) #("aide" 0 4 (ivy-index 0)) "~/.emacs.d/lisp/init-aider.el" #("epolar3.f" 0 9 (ivy-index 3)) #("epolar3.org" 0 11 (ivy-index 0)) #("*aider:/home/wzj/ti…(2)" 0 23 (ivy-index 0)) #("gene" 0 4 (ivy-index 0)) #("init" 0 4 (ivy-index 2)) #("ta" 0 2 (ivy-index 0)) "~/.emacs.d/lisp/init-tabbar.el" #("~/.emacs.d/lisp/init-org-modern.el" 0 34 (ivy-index 0)) #("*Messages*" 0 10 (ivy-index 1)) #("*Async-native-compile-log*" 0 26 (ivy-index 3)) #("me" 0 2 (ivy-index 0)) #("lisp ai" 0 7 (ivy-index 0)) "~/.emacs.d/lisp/init-aider.el" #("ini" 0 3 (ivy-index 2)) #("~/tinker/source/group.f" 0 23 (ivy-index 6)) #("~/.emacs.d/lisp/init-tabbar.el" 0 30 (ivy-index 1)) #("~/.emacs.d/lisp/init-evil.el" 0 28 (ivy-index 6)) #("el" 0 2 (ivy-index 4)) "elj3.org" #("~/tinker/source/elj3.org" 0 24 (ivy-index 2)) #("org" 0 3 (ivy-index 1)) "init-org-modern.el" "elj3.org" "init-evil.el" #("init-org-modern.el" 0 18 (ivy-index 3)) #("elj3.org" 0 8 (ivy-index 1)) #("*Warnings*" 0 10 (ivy-index 8)) #("init-general.el" 0 15 (ivy-index 10 face ivy-virtual)) "init-evil.el" #("init-evil.el" 0 12 (ivy-index 13 face ivy-virtual)) #("yes" 0 3 (ivy-index 0)) #("a.org" 0 5 (ivy-index 1)) #("elj3.f" 0 6 (ivy-index 1)) #("init.el" 0 7 (ivy-index 1)) #("analyze.f" 0 9 (ivy-index 1)) #("i" 0 1 (ivy-index 0)) #("fortran" 0 7 (ivy-index 0))))
(setq counsel-describe-symbol-history '(#("^tr extr" 0 8 (ivy-index 1)) "treesit-extra-load-path"))
(setq find-function--read-history-variable '(#("treesit-extra-load-path" 0 23 (ivy-index 4))))
(setq counsel-M-x-history '(#("^dirvish" 0 8 (ivy-index 13)) "dirvish" #("^evil-mc-" 0 9 (ivy-index 4)) "evil-mc-undo-all-cursors" #("^evil-mc" 0 8 (ivy-index 3)) "evil-mc-make-all-cursors" "evil-mc-undo-all-cursors" #("^evil-mc-make" 0 13 (ivy-index 6)) "evil-mc-make-cursor-in-visual-selection-end" "evil-mc-make-all-cursors" "dirvish" #("^ace-mc" 0 7 (ivy-index 2)) "ace-mc-do-keyboard-reset" #("^ace" 0 4 (ivy-index 0)) "ace-mc-add-single-cursor" "ace-mc-add-single-cursor" #("^ace-" 0 5 (ivy-index 4)) "ace-jump-mode" "ace-mc-add-single-cursor" #("^high" 0 5 (ivy-index 1)) "highlight-blocks-mode" #("^rain" 0 5 (ivy-index 0)) "rainbow-delimiters-mode" "rainbow-delimiters-mode" #("^aider " 0 7 (ivy-index 8)) "aider-region-explain" #("^aider-se" 0 9 (ivy-index 1)) "aider-send-region" #("^ivy" 0 4 (ivy-index 7)) "ivy-toggle-fuzzy" #("^tab-bar-switch" 0 15 (ivy-index 3)) "tab-bar-switch-to-prev-tab" #("^aider-ex" 0 9 (ivy-index 0)) "aider-exit" #("^aider-" 0 7 (ivy-index 2)) "aider-repo-find-name-dired" #("^wind" 0 5 (ivy-index 7)) "windmove-swap-states-right" "windmove-swap-states-left" "windmove-right" #("^tab" 0 4 (ivy-index 0)) "tab-switcher-unmark" #("^tab-swi" 0 8 (ivy-index 1)) "tab-switcher-mode" #("^tab-s" 0 6 (ivy-index 2)) "tab-switcher-select" "tab-switch" "tab-switcher-mode" #("^tab-bar" 0 8 (ivy-index 34)) "tab-bar-new-tab" #("^tab-bar-" 0 9 (ivy-index 0)) "tab-bar-history-back" #("^tab-bar-close" 0 14 (ivy-index 1)) "tab-bar-close-tab" #("^kill-" 0 6 (ivy-index 23)) "kill-buffer-and-window" #("^mark" 0 5 (ivy-index 3)) "markdown-mode" #("^yank" 0 5 (ivy-index 6)) "yank" #("^org-insert" 0 11 (ivy-index 1)) "org-insert-structure-template" #("^org-modern" 0 11 (ivy-index 1)) "org-modern-indent-mode" #("^org-mode" 0 9 (ivy-index 0)) "org-modern-mode" "org-modern-mode" "org-modern-indent-mode" "org-modern-mode" #("^eval-bu" 0 8 (ivy-index 0)) "eval-buffer" #("^aider-tr" 0 9 (ivy-index 0)) "aider-transient-menu" "org-insert-structure-template" #("^org-table" 0 10 (ivy-index 27)) "org-table-create" #("^tab bar mode" 0 13 (ivy-index 1)) "tab-bar-mode" #("^eval bu" 0 8 (ivy-index 0)) "eval-buffer" "eval-buffer" #("^counsel-" 0 9 (ivy-index 102)) "counsel-org-tag" #("^counsel-m" 0 10 (ivy-index 3)) "counsel-minibuffer-history" "org-modern-indent-mode" #("^org-moder" 0 10 (ivy-index 1)) "org-modern-indent-mode" #("^undo" 0 5 (ivy-index 2)) "undo-redo" #("^org-inde" 0 9 (ivy-index 2)) "org-indent-mode" "org-mode" "org-mode" "org-mode" "org-mode" "org-modern-mode" "counsel-locate" "counsel-dired" #("^ivy-yank" 0 9 (ivy-index 1))))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "no" "yes"))
(setq extended-command-history '("eval-buffer" "split-window-below" "eval-buffer"))
(setq file-name-history '(#("/home/wzj/.emacs.d/lisp/init-evil.el" 0 36 (ivy-index 0)) #("/home/wzj/.emacs.d/init.el" 0 26 (ivy-index 1)) #("/home/wzj/.emacs.d/lisp/init-dirvish.el" 0 39 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-rainbow-delimiter.el" 0 49 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-super-save.el" 0 42 (ivy-index 0)) #("/home/wzj/tinker/source/epolar3.f" 0 33 (ivy-index 3)) #("/home/wzj/.emacs.d/README" 0 25 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-aider.el" 0 37 (ivy-index 0)) #("/home/wzj/tinker/source/epolar3.org" 0 35 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-org-modern.el" 0 42 (ivy-index 1)) #("/home/wzj/tinker/source/mutant.f" 0 32 (ivy-index 0)) #("/home/wzj/tinker/source/neigh.f" 0 31 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-general.el" 0 39 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-tabbar.el" 0 38 (ivy-index 0)) #("/home/wzj/tinker/source/group.f" 0 31 (ivy-index 0)) #("/home/wzj/tinker/source/energi.f" 0 32 (ivy-index 0)) #("/home/wzj/tinker/source/vdw.f" 0 29 (ivy-index 2)) #("/home/wzj/tinker/source/elj3.f" 0 30 (ivy-index 3)) #("/home/wzj/tinker/source/elj3.org" 0 32 (ivy-index 0)) #("/home/wzj/.emacs.d/" 0 19 (ivy-index 0)) #("/home/wzj/a.org" 0 15 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/a.org" 0 29 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-dashboard.el" 0 41 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-nerd-icon.el" 0 41 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-doom-modeline.el" 0 45 (ivy-index 5)) #("/home/wzj/" 0 10 (ivy-index 0)) #("/home/wzj/tinker/source/analyze.f" 0 33 (ivy-index 3)) #("/home/wzj/.emacs.d/lisp/init-treesit.el" 0 39 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/" 0 24 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-meow.el" 0 36 (ivy-index 2)) #("/home/wzj/.emacs.d/lisp/init-avy.el" 0 35 (ivy-index 0)) #("/home/wzj/tinker/source/elj2.f" 0 30 (ivy-index 2)) #("/home/wzj/tinker/source/cell.f" 0 30 (ivy-index 0)) #("/home/wzj/tinker/source/analyz.f" 0 32 (ivy-index 1)) #("/home/wzj/tinker/source/analysis.f" 0 34 (ivy-index 0)) #("/home/wzj/tinker/" 0 17 (ivy-index 2)) #("/home/wzj/.emacs.d/lib/" 0 23 (ivy-index 0)) #("/home/wzj/.emacs.d/lisp/init-lspbridge.el" 0 41 (ivy-index 5)) "~/.emacs.d/lisp/init-ivy.el" "~/.emacs.d/lisp/init-nerd-icon.el" "~/.emacs.d/lisp/init-ivy.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-nerd-icon.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-nerd-icon.el" "~/.emacs.d/lisp/init-doom-modeline.el" "~/.emacs.d/lisp/init-nerd-icon.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-doom-modeline.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-magit.el" "~/.emacs.d/lisp/init-borg.el" "~/.emacs.d/early-init.el" "~/.emacs.d/lisp/init-borg.el" "~/.emacs.d/init.el"))
(setq evil-jumps-history '((324 #1="~/.emacs.d/lisp/") (6889 #4="/home/wzj/.emacs.d/lisp/init-general.el") (159 #2="/home/wzj/.emacs.d/lisp/init-dirvish.el") (324 #1#) (159 #2#) (479 #3="/home/wzj/.emacs.d/lisp/init-evil.el") (474 #3#) (375 #3#) (6649 #4#) (1515 "/home/wzj/.emacs.d/init.el") (109 "/home/wzj/.emacs.d/lisp/init-dirvish.el") (6943 #5="/home/wzj/.emacs.d/lisp/init-general.el") (6631 #5#) (6615 "/home/wzj/.emacs.d/lisp/init-general.el") (112 "/home/wzj/.emacs.d/lisp/init-rainbow-delimiter.el") (364 "/home/wzj/.emacs.d/lisp/init-super-save.el") (1969 "/home/wzj/.emacs.d/init.el") (5929 #6="/home/wzj/.emacs.d/lisp/init-general.el") (65 #6#) (6582 #6#) (1969 "/home/wzj/.emacs.d/init.el") (62 "/home/wzj/.emacs.d/lisp/init-rainbow-delimiter.el") (6240 #6#) (2028 #7="/home/wzj/.emacs.d/init.el") (1095 #7#) (363 "/home/wzj/.emacs.d/lisp/init-super-save.el") (6444 "/home/wzj/.emacs.d/lisp/init-general.el")))
